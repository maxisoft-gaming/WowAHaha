name: Run the WowAHaha project

on:
  schedule:
    - cron: "33 * * * *"
    - cron: "3 * * * *"
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      first_run:
        description: 'Run release for the first time (may be needed if current day is NOT the first day of the month)'
        default: false
        required: false
        type: boolean
        
      force_release:
        description: 'Force a release (useful for testing)'
        default: false
        required: false
        type: boolean
        
      fast_release:
        description: 'Skip cache, hash and attest-build-provenance (fast run)'
        default: false
        required: false
        type: boolean
      
  fork:
    branches:
      - main
  status:
    branches:
      - main
  issues:
    branches:
      - main
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  dotnet-version: '9.0.x'
  dotnet-configuration: Release
  DOTNET_NOLOGO: true
  PROGRAM_NAME: WowAHaha
  #LATEST_CSV_TAG: latest_csv
  RELEASE_CSV_PREFIX: wow_ah_csv_
  FORCE_RELEASE: false # set to true to force a release (useful for testing)
  SKIP_PREVIOUS_RELEASE_DOWNLOAD: false
  SKIP_BUILD_ATTEST: false
  FAST_RELEASE: false # set to true to skip cache, hash and attest-build-provenance
  USE_WORKING_DIR_CACHE: false
  SEVENZIP_FLAGS: '-mx=2 -md=64m -xr!*.7z -xr!*.zip'
  FIRST_RUN: false # set to true in case no previous files was build

concurrency:
  group: "${{ github.workflow }}-${{ github.actor }}"
  cancel-in-progress: false
  


jobs:
  run-every-hour:
    name: Run the WowAHaha project
    timeout-minutes: 25
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      packages: write
      contents: write
    steps:
      - name: Prepare
        id: prepare
        shell: python
        run: |
          import os
          import datetime
          import json
          import collections

          true_values = {'true', '1', 'yes', 'on', 'y', 'enable', 'enabled', '#t', '#true', 'ok', 'okay'}
          now = datetime.datetime.utcnow()

          year_and_month = now.strftime('%Y_%m')
          release_csv_suffix = year_and_month + (os.getenv('RELEASE_CSV_SUFFIX') or '.7z')
          overwritten = 0
          _local_env = dict()
          env = collections.ChainMap(_local_env, os.environ)

          with open(os.getenv('GITHUB_STEP_SUMMARY'), 'a') as step_summary:
            step_summary.write(f'# Run the WowAHaha project for *{year_and_month}* \n')

            with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
              env_file.write(f'RELEASE_CSV_SUFFIX={release_csv_suffix}\n')
              env_file.write(f'RELEASE_YEAR_AND_MONTH={year_and_month}\n')
              env_file.write(f'RELEASE_YEAR={now.year}\n')
              env_file.write(f'RELEASE_MONTH={now.month}\n')
          
              first_run_from_input = r"""${{ inputs.first_run }}""".strip().lower()
              if first_run_from_input:
                value = first_run_from_input in true_values
                env_file.write(f'FIRST_RUN={value}\n')
                _local_env['FIRST_RUN'] = str(bool(value)).lower()
                overwritten += 1

              force_release_from_input = r"""${{ inputs.force_release }}""".strip().lower()
              if force_release_from_input:
                value = force_release_from_input in true_values
                env_file.write(f'FORCE_RELEASE={value}\n')
                _local_env['FORCE_RELEASE'] = str(bool(value)).lower()
                overwritten += 1

              fast_release_from_input = r"""${{ inputs.fast_release }}""".strip().lower()
              if fast_release_from_input:
                value = fast_release_from_input in true_values
                env_file.write(f'FAST_RELEASE={value}\n')
                _local_env['FAST_RELEASE'] = str(bool(value)).lower()
                overwritten += 1
          
              allowed_actors = r"""${{ secrets.ALLOWED_ACTOR || vars.ALLOWED_ACTOR || env.ALLOWED_ACTOR || github.repository_owner }}""".strip()

              github_actor = r"""${{ github.actor }}""".strip()
              
              if allowed_actors:
                if ',' in allowed_actors:
                  allowed_actors = [s.strip() for s in allowed_actors.split(',')]
                  if github_actor in allowed_actors:
                    env_file.write(f'''ALLOWED_ACTOR={github_actor}\n''')
                else:
                  env_file.write(f'''ALLOWED_ACTOR={allowed_actors}\n''')
          
              if allowed_actors and github_actor in allowed_actors:
                step_summary.write(f":white_check_mark: Actor {github_actor} is allowed to publish releases.\n")
              else:
                step_summary.write(f":x: Actor {github_actor} is not allowed.\n")

              for bool_env_var in ['FAST_RELEASE', 'USE_WORKING_DIR_CACHE', 'SKIP_PREVIOUS_RELEASE_DOWNLOAD', 'SKIP_BUILD_ATTEST', 'FIRST_RUN', 'FORCE_RELEASE']:
                if env.get(bool_env_var, '').lower() in true_values:
                  env_file.write(f'{bool_env_var}=true\n')
                else:
                  env_file.write(f'{bool_env_var}=false\n')
  
              step_summary.write('## :gear: Environment variables \n')
          
              if env.get('FAST_RELEASE', '') == 'true':
                env_file.write('USE_WORKING_DIR_CACHE=false\n')
                env_file.write('SKIP_BUILD_ATTEST=true\n')
                overwritten += 2
          
              if now.day == 1:
                env_file.write('FIRST_DAY_OF_MONTH=true\n')
                overwritten += 1
          
              if not env.get('LATEST_CSV_TAG', ''):
                env_file.write(f'LATEST_CSV_TAG=csv{now.year}.{now.month}\n')
              
              if overwritten > 0:
                step_summary.write(f'### Some environment variables were dynamically added/overwritten: {overwritten} \n')
  
              step_summary.write('| Variable | Value |\n')
              step_summary.write('|----------|------------------|\n')
              for env_var in (['FAST_RELEASE', 'USE_WORKING_DIR_CACHE', 'SKIP_PREVIOUS_RELEASE_DOWNLOAD', 'SKIP_BUILD_ATTEST', 'FIRST_RUN', 'FORCE_RELEASE'] +
                              ['LATEST_CSV_TAG', 'RELEASE_CSV_PREFIX', 'FIRST_DAY_OF_MONTH']):
                value = env.get(env_var, '(not set)')
                step_summary.write(f"| {env_var} | {value} |\n")
          
      - uses: actions/checkout@v4.2.2
        with:
          submodules: 'recursive'
      - name: Setup .NET Core SDK ${{ env.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: ${{ env.PROGRAM_NAME }}/bin/${{ env.dotnet-configuration }}
          key: ${{ runner.os }}-${{ env.PROGRAM_NAME }}-build-output-${{ env.dotnet-configuration }}-${{ hashFiles('**/*.csproj') }}-${{ hashFiles('**/*.cs') }}

      - name: Build
        run: |
          dotnet build --configuration ${{ env.dotnet-configuration }} --no-restore
          
          
      - uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ env.LATEST_CSV_TAG }}

      - name: Check if tag exists
        if: steps.check-tag.outputs.exists != 'true'
        run: |
          echo "SKIP_PREVIOUS_RELEASE_DOWNLOAD=true" >> $GITHUB_ENV
          echo "## :information_source: Skipping previous release download as tag ${{ env.LATEST_CSV_TAG }} does not exist." >> $GITHUB_STEP_SUMMARY
      
      
      - name: Download latest files from Release
        uses: robinraju/release-downloader@v1
        id: download_release
        if: env.SKIP_PREVIOUS_RELEASE_DOWNLOAD != 'true'
        with:
          tag: ${{ env.LATEST_CSV_TAG }}
          fileName: '${{ env.RELEASE_CSV_PREFIX }}*${{ env.RELEASE_CSV_SUFFIX }}'
          extract: false

      - name: Cache wd directory
        uses: actions/cache@v4
        id: wd_cache
        if: env.USE_WORKING_DIR_CACHE == 'true'
        with:
          path: wd
          enableCrossOsArchive: true
          key: ${{ env.PROGRAM_NAME }}-csv-wd-${{ env.RELEASE_CSV_SUFFIX }}-${{ hashFiles('**/*.7z') }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ env.PROGRAM_NAME }}-csv-wd-${{ env.RELEASE_CSV_SUFFIX }}-

      - name: Unzip latest files
        if: env.SKIP_PREVIOUS_RELEASE_DOWNLOAD != 'true'
        run: |
          echo "## :package: Unzip latest files" >> $GITHUB_STEP_SUMMARY
          if [ ! -d wd ] || [ -z "$(ls -A wd/)" ]; then
            mkdir -p wd
            if [ -n "${{ steps.download_release.outputs.downloaded_files }}" ]; then
              downloaded_file=$(echo "${{ fromJson(steps.download_release.outputs.downloaded_files)[0] }}" | tr -d '"')
              7z x $downloaded_file -owd
              rm -rf wd/*.7z
              rm -rf wd/*.zip
              rm -rf wd/wd
              echo ":package: Extracted files from $downloaded_file" >> $GITHUB_STEP_SUMMARY
              # create a physical hard link to the previous release archive
              PREVIOUS_RELEASE_DOWNLOADED_FILE="$(pwd)/${{ env.RELEASE_CSV_PREFIX }}previous_release${{ env.RELEASE_CSV_SUFFIX }}"
              ln "$downloaded_file" $PREVIOUS_RELEASE_DOWNLOADED_FILE
              echo "PREVIOUS_RELEASE_DOWNLOADED_FILE=$PREVIOUS_RELEASE_DOWNLOADED_FILE" >> $GITHUB_ENV
              echo "PREVIOUS_RELEASE_DOWNLOADED_FILE_SOURCE=release" >> $GITHUB_ENV
            else
              echo "No downloaded files found. Aborting." 1>&2
              exit 0
            fi
          else
            echo ":information_source: Using cached data instead of downloading from release." >> $GITHUB_STEP_SUMMARY
            file_name=${{ env.RELEASE_CSV_PREFIX }}cached${{ env.RELEASE_CSV_SUFFIX }}
            pushd wd
            rm -rf *.7z
            rm -rf *.zip
            rm -rf wd
            7z a ${{ env.SEVENZIP_FLAGS }} "../$file_name" *
            popd
            echo "PREVIOUS_RELEASE_DOWNLOADED_FILE=$(pwd)/$file_name" >> $GITHUB_ENV
            echo "PREVIOUS_RELEASE_DOWNLOADED_FILE_SOURCE=cache" >> $GITHUB_ENV
            exit 0
          fi

      - name: Checks and Steps Summary
        run: |
          {
            echo "## ⚠️ Secret Checks" >> $GITHUB_STEP_SUMMARY
            if [ -z "${{ secrets.BattleNetClientId }}" ] || [ -z "${{ secrets.BattleNetClientSecret }}" ]; then
              echo "Required secrets are not set. Please set BattleNetClientId and BattleNetClientSecret in your repository secrets." 1>&2
              echo ":x: **Error**: Required secrets are not set. Please set *BattleNetClientId* and *BattleNetClientSecret* in your repository secrets." >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo ":white_check_mark: Required secrets are set." >> $GITHUB_STEP_SUMMARY
            fi

            if [ -z "${{ secrets.BattleNetCredentialEncryptionKey }}" ]; then
              echo ":warning: **Note**: Not using encryption key." >> $GITHUB_STEP_SUMMARY
            else
              echo ":lock: Using custom encryption key." >> $GITHUB_STEP_SUMMARY
            fi

            echo "## :computer: System Information" >> $GITHUB_STEP_SUMMARY
            echo "| Property               | Value                  |" >> $GITHUB_STEP_SUMMARY
            echo "|------------------------|------------------------|" >> $GITHUB_STEP_SUMMARY
            echo "| :computer: Processors  | $(nproc)               |" >> $GITHUB_STEP_SUMMARY
            echo "| :gear: Architecture    | $(uname -m)            |" >> $GITHUB_STEP_SUMMARY
            echo "| :rocket: .NET Version  | $(dotnet --version)    |" >> $GITHUB_STEP_SUMMARY
            echo "| :bust_in_silhouette: GitHub Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
            echo "| :tada: GitHub Event    | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: OS           | $(uname -s)            |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: OS Version   | $(uname -v)            |" >> $GITHUB_STEP_SUMMARY
          }

      - name: Summary of the previously generated files
        shell: python
        run: |
          import os
          import sys
          import hashlib
          from pathlib import Path
          
          fast_release = os.getenv('FAST_RELEASE', 'false').lower() == 'true'
          
          def human_readable_size(size):
              size_suffixes = ['B', 'KB', 'MB', 'GB', 'TB']
              size_index = 0
              while size >= 1024 and size_index < len(size_suffixes):
                  size /= 1024
                  size_index += 1
              return f'{size:.2f} {size_suffixes[size_index]}'
          
          wd = Path('wd')
          if not wd.exists():
              print('No wd directory', file=sys.stderr)
              sys.exit(0)

          files: list[Path] = sorted(set(wd.rglob('*.csv'))) + sorted(set(wd.rglob('*.json'))) + sorted(set(wd.rglob('*.jsonl')))
          if len(files) == 0:
              print('No CSV files previously generated')
              sys.exit(0)
          
          with open(os.getenv('GITHUB_STEP_SUMMARY'), 'a') as step_summary:
              step_summary.write('## :file_folder: **Previously** Generated files\n')
              step_summary.write('| Name               | blake2s Hash                  | File Size                    |\n')
              step_summary.write('|-------------------------|------------------------------|------------------------------|\n')
              for file in files:
                  hash = hashlib.blake2s(file.read_bytes()).hexdigest() if not fast_release else 'SKIP'
                  size = file.stat().st_size
                  step_summary.write(f"| {file.relative_to(wd)} | {hash} | {human_readable_size(size)} |\n")

      - name: Run WowAHaha
        if: env.ALLOWED_ACTOR == github.actor || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        timeout-minutes: 30
        id: run
        run: |
          mkdir -p wd
          cd wd
          $env:AHaha_BattleNetWebApi:clientId='${{ secrets.BattleNetClientId }}';
          $env:AHaha_BattleNetWebApi:clientSecret='${{ secrets.BattleNetClientSecret }}';
          $env:AHaha_BattleNetWebApi:CredentialEncryptionKey='${{ secrets.BattleNetCredentialEncryptionKey }}';
          dotnet run --no-build --configuration Release --project "../${{ env.PROGRAM_NAME }}"
        shell: pwsh
        
        
        
        # TODO check files
        # TODO check changes via hash
        # TODO skip early if no changes

      - name: Summary of the generated files
        shell: python
        run: |
          import os
          import sys
          import hashlib
          from pathlib import Path
          
          def human_readable_size(size):
              size_suffixes = ['B', 'KB', 'MB', 'GB', 'TB']
              size_index = 0
              while size >= 1024 and size_index < len(size_suffixes):
                  size /= 1024
                  size_index += 1
              return f'{size:.2f} {size_suffixes[size_index]}'
          
          wd = Path('wd')
          if not wd.exists():
              print('No wd directory', file=sys.stderr)
              sys.exit(1)

          files: list[Path] = sorted(set(wd.rglob('*.csv'))) + sorted(set(wd.rglob('*.json'))) + sorted(set(wd.rglob('*.jsonl')))
          if len(files) == 0:
              print('No CSV files generated', file=sys.stderr)
              sys.exit(1)
          
          with open(os.getenv('GITHUB_STEP_SUMMARY'), 'a') as step_summary:
              step_summary.write('## :file_folder: **Newly** Generated files\n')
              step_summary.write('| Name               | blake2s Hash                  | File Size                    |\n')
              step_summary.write('|-------------------------|------------------------------|------------------------------|\n')
              for file in files:
                  hash = hashlib.blake2s(file.read_bytes())
                  size = file.stat().st_size
                  step_summary.write(f"| {file.relative_to(wd)} | {hash.hexdigest()} | {human_readable_size(size)} |\n")

      - name: Create artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.PROGRAM_NAME }}_csv
          path: wd/*
          retention-days: 90

      - name: Create a 7z file of csv files
        id: csv_7z
        run: |
          file_name="${{ env.RELEASE_CSV_PREFIX }}${{ env.RELEASE_CSV_SUFFIX }}"
          pushd wd
          7z a ${{ env.SEVENZIP_FLAGS }} "../$file_name" *
          popd
          size=$(wc -c < "$file_name")
          echo "sevenzip_file_name=$file_name" >> $GITHUB_OUTPUT
          echo "sevenzip_file_size=$size" >> $GITHUB_OUTPUT
          {
            echo "## :package: 7z Archive Details" >> $GITHUB_STEP_SUMMARY
            echo "| Property            | Value                        |" >> $GITHUB_STEP_SUMMARY
            echo "|--------------------|------------------------------|" >> $GITHUB_STEP_SUMMARY
            echo "| :file_folder: Name  | $file_name                   |" >> $GITHUB_STEP_SUMMARY
            echo "| :page_facing_up: Size | $(ls -lh "$file_name" | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: 7z Flags  | ${{ env.SEVENZIP_FLAGS }}              |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: 7z Version | $(7z i | head -n 2 | tail -n 1)           |" >> $GITHUB_STEP_SUMMARY
            echo "| :package: p7zip Version | $(7z i | head -n 3 | tail -n 1)           |" >> $GITHUB_STEP_SUMMARY
            echo "| :clock1: Creation Date | $(date '+%Y-%m-%d %H:%M:%S') |" >> $GITHUB_STEP_SUMMARY
          }
          if [ $size -lt 50000 ]; then
            echo "The resulting 7z file is too small ($size bytes). Aborting." 1>&2
            exit 1
          fi
          
          if [ -n "${{ env.PREVIOUS_RELEASE_DOWNLOADED_FILE }}" ] && [ -f "${{ env.PREVIOUS_RELEASE_DOWNLOADED_FILE }}" ]; then
            old_size=$(wc -c < "${{ env.PREVIOUS_RELEASE_DOWNLOADED_FILE }}")
            delta_size=$(echo "scale=2; ($size - $old_size) / 1024" | bc)
            delta_percent=$(echo "scale=2; ($size - $old_size) / ($old_size + 1) * 100" | bc)

            echo "## :package: File Size Changes" >> $GITHUB_STEP_SUMMARY
            echo "| Property            | Value                        |" >> $GITHUB_STEP_SUMMARY
            echo "|---------------------|------------------------------|" >> $GITHUB_STEP_SUMMARY
            echo "| :package: Source     | ${{ env.PREVIOUS_RELEASE_DOWNLOADED_FILE_SOURCE || 'unknown' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| :file_folder: Old Size | $(ls -lh "${{ env.PREVIOUS_RELEASE_DOWNLOADED_FILE }}" | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
            echo "| :page_facing_up: New Size | $(ls -lh "$file_name" | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
            echo "| :chart_with_upwards_trend: Delta Size | $delta_size KiB (${delta_percent}%) |" >> $GITHUB_STEP_SUMMARY

            if python -c "import math; print(math.log1p($size) - math.log1p($old_size) < -0.1)" | grep -q "True"; then
              echo "The resulting 7z file is smaller than the previous one. This is a regression. Aborting." 1>&2
              echo "### :warning: The resulting 7z file is smaller than the previous one. This is a regression. Aborting." >> $GITHUB_STEP_SUMMARY
              exit 2
            fi
          
            if python -c "print(float($delta_size) < 64)" | grep -q "True"; then
              echo ARCHIVE_NO_CHANGE=true >> $GITHUB_ENV
              echo "# :information_source: There's no change in the 7z file. Skipping release." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## :warning: No previous file to compare to." >> $GITHUB_STEP_SUMMARY
            echo "No previous file to compare to. Skipping size comparison." 1>&2
            if [ "${{ env.FIRST_DAY_OF_MONTH || env.FIRST_RUN }}" != "true" ]; then
              echo '## :warning: If it is the first run, you must set `FIRST_RUN` to `true` for the script to work.' >> $GITHUB_STEP_SUMMARY
              exit 5
            fi
          fi


      - name: Attest Build Provenance of csv files
        if: env.SKIP_BUILD_ATTESTATION != 'true' && env.ARCHIVE_NO_CHANGE != 'true' && github.event_name != 'schedule' # disable on schedule to speed up
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wd/*'

      - name: Attest Build Provenance the archive 7z file
        if: env.SKIP_BUILD_ATTESTATION != 'true' && env.ARCHIVE_NO_CHANGE != 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "${{ steps.csv_7z.outputs.sevenzip_file_name }}"

      - uses: rickstaa/action-create-tag@v1
        if: env.ARCHIVE_NO_CHANGE != 'true' && env.ALLOWED_ACTOR == github.actor && (env.FORCE_RELEASE == 'true' || (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'))
        id: "tag_create"
        with:
          tag: ${{ env.LATEST_CSV_TAG }}
          tag_exists_error: false
          force_push_tag: true

      - name: Create a new release
        uses: ncipollo/release-action@v1
        if: env.ARCHIVE_NO_CHANGE != 'true' && env.ALLOWED_ACTOR == github.actor && (env.FORCE_RELEASE == 'true' || (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'))
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "${{ steps.csv_7z.outputs.sevenzip_file_name }}"
          name: ${{ env.RELEASE_YEAR }}.${{ env.RELEASE_MONTH }} csv
          body: |
            This is an automated release of the latest auctions csv files and token prices.
            From @${{ github.actor }} triggered by (${{ github.event_name }}) @ ${{ github.sha }}
          draft: false
          prerelease: false
          makeLatest: true
          replacesArtifacts: true
          removeArtifacts: false
          tag: ${{ env.LATEST_CSV_TAG }}